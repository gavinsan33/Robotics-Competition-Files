{"mode":"Text","textContent":"#region VEXcode Generated Robot Configuration\nfrom vex import *\nimport urandom\n\n# Brain should be defined by default\nbrain=Brain()\n\n# Robot configuration code\nmotor1L = Motor(Ports.PORT1, GearSetting.RATIO_6_1, True)\nmotor2L = Motor(Ports.PORT2, GearSetting.RATIO_6_1, True)\nmotor1R = Motor(Ports.PORT3, GearSetting.RATIO_6_1, False)\nmotor2R = Motor(Ports.PORT4, GearSetting.RATIO_6_1, False)\nsol_a = DigitalOut(brain.three_wire_port.a)\narmMotor_motor_a = Motor(Ports.PORT5, GearSetting.RATIO_6_1, False)\narmMotor_motor_b = Motor(Ports.PORT6, GearSetting.RATIO_6_1, True)\narmMotor = MotorGroup(armMotor_motor_a, armMotor_motor_b)\ncontroller_1 = Controller(PRIMARY)\narmMotor2_motor_a = Motor(Ports.PORT7, GearSetting.RATIO_18_1, False)\narmMotor2_motor_b = Motor(Ports.PORT8, GearSetting.RATIO_18_1, True)\narmMotor2 = MotorGroup(armMotor2_motor_a, armMotor2_motor_b)\n\n\n# wait for rotation sensor to fully initialize\nwait(30, MSEC)\n\n\n\n\n\n\n#endregion VEXcode Generated Robot Configuration\n\n# ------------------------------------------\n# \n# \tProject:      VEXcode Project\n#\tAuthor:       VEX\n#\tCreated:\n#\tDescription:  VEXcode V5 Python Project\n# \n# ------------------------------------------\n\n# Library imports\nfrom vex import *\n\n# Begin project code\n\n#region VEXcode Generated Robot Configuration\nfrom vex import *\nimport urandom\n\n# Brain should be defined by default\nbrain=Brain()\n\n# Robot configuration code\n\n\n# wait for rotation sensor to fully initialize\nwait(30, MSEC)\n#endregion VEXcode Generated Robot Configuration\n\n# ------------------------------------------\n# \n# \tProject:\n#\tAuthor:\n#\tCreated:\n#\tConfiguration:\n# \n# ------------------------------------------\n\n# Library imports\nfrom vex import *\n\n# Begin project code\n\nleftMotors = (motor1L, motor2L)\nrightMotors = (motor1R, motor2R)\n\nleftMotor = 1\nrightMotor = 1\n\ntempL = None\ntempR = None\n\nbuttonX = False\n\nrecordInput = False\n\narmMotorState = 0\nprevArmMotorState = 0\n\narmMotorState2 = 0\nprevArmMotorState2 = 0\n\n#Paste recorded input here:\nRECORDED_INPUT = \"0&0@1490r|0&0@2310-|0&0@2370l|0&0@2450-|0&2@2810-|5&7@2850-|40&70@2870-|77&100@2890-|95&100@2910-|100&100@2950-|100&100@3010l|100&100@3450-|96&100@4710-|93&100@4970-|91&100@4990-|90&100@5010-|89&100@5050-|84&100@5070-|69&100@5090-|51&100@5110-|34&100@5150-|5&100@5170-|0&100@5190-|-1&100@5370-|-9&100@5390-|-26&100@5410-|-36&100@5450-|-49&100@5470-|-55&100@5490-|-79&100@5510-|-96&100@5550-|-100&100@5570-|-84&100@5690-|0&100@5710-|37&100@5750-|100&100@5770-|100&81@5970-|100&65@5990-|100&39@6010-|100&17@6050-|100&0@6070-|85&3@6290-|44&33@6310-|24&46@6350-|18&51@6390-|29&0@6410-|64&-24@6450-|100&-100@6470-|75&-100@6590-|25&-100@6610-|0&-100@6650-|0&-46@6670-|-35&0@6690-|-74&25@6710-|-100&100@6750-|-88&100@7070-|-54&100@7090-|0&100@7110-|53&100@7150-|85&100@7170-|85&41@7210-|85&0@7250-|85&-12@7270-|88&-77@7290-|90&-100@7310-|91&-100@7350-|92&-100@7450-|93&-100@7470-|95&-100@7490-|98&-100@7510-|98&-89@7670-|98&-25@7690-|98&7@7710-|98&46@7750-|98&100@7770-|97&100@7850-|74&100@7870-|40&100@7890-|0&100@7910-|-6&100@7950-|-31&100@7970-|-39&100@7990-|-40&100@8010-|-39&100@8050-|-40&100@8090-|-42&100@8110-|-64&100@8150-|-100&100@8170-|-57&100@8490-|33&100@8510-|100&100@8550-|100&88@8590-|100&25@8610-|100&3@8650-|100&0@8670-|100&-7@8690-|100&-42@8710-|100&-62@8750-|100&-84@8770-|100&-100@8790-|100&-45@9050-|100&0@9070-|100&17@9090-|100&75@9110-|100&95@9150-|92&100@9170-|73&100@9190-|40&100@9210-|13&100@9250-|0&100@9270-|-26&100@9290-|-74&100@9310-|-89&100@9350-|-88&100@9390-|-90&100@9410-|-89&100@9450-|-90&100@9470-|-89&100@9490-|-88&100@9510-|-90&100@9570-|-89&100@9590-|-90&100@9610-|-87&100@9650-|-59&100@9670-|-40&100@9690-|14&100@9710-|40&100@9750-|44&100@9770-|45&95@9790-|46&82@9810-|47&62@9850-|47&26@9870-|48&0@9890-|49&0@9910-|51&0@9950-|42&0@10050-|38&43@10070-|38&85@10090-|42&100@10110-|58&100@10150-|76&100@10170-|82&100@10190-|90&100@10210-|97&100@10270-|100&100@10290-|100&70@10610-|100&32@10650-|100&0@10670-|100&-32@10690-|100&-74@10710-|100&-96@10750-|100&-100@10770-|100&-99@11090-|100&-44@11110-|29&15@11150-|-14&84@11170-|-68&100@11190-|-100&100@11210-|-100&96@11770-|-100&85@11790-|-100&79@11810-|-100&63@11850-|-100&45@11870-|-100&41@11890-|-100&13@11910-|-100&3@11950-|-100&0@11970-|-100&-7@12110-|-100&-14@12150-|-100&-21@12170-|-100&-22@12190-|-100&-21@12250-|-100&-20@12290-|-100&-15@12310-|-100&-12@12350-|-100&0@12370-|-100&3@12450-|-100&26@12470-|-100&52@12490-|-100&100@12510-|-86&100@12670-|-18&100@12690-|5&100@12710-|30&100@12750-|67&100@12770-|100&100@12790-|97&100@14150-|90&100@14170-|85&100@14190-|77&100@14210-|74&100@14250-|73&100@14270-|74&100@14390-|76&100@14410-|81&100@14450-|89&100@14470-|96&100@14490-|100&100@14510-|100&25@14670-|100&0@14690-|100&-69@14710-|100&-100@14750-|87&-60@16170-|0&0@16190-|-6&0@16650-|-7&0@16670-|-1&0@16750-|0&0@16770-|-7&0@16950-|-23&0@16970-|-34&0@16990-|-45&0@17010-|-47&0@17050-|-48&0@17070-|-44&0@17190-|0&0@17210-|\"\n##############\n\narmMotor.set_stopping(HOLD)\n\ndef move(l, r, a, a2):\n    \n    if(l > 0):\n        for motor in leftMotors:\n            motor.spin(FORWARD)\n            motor.set_velocity(l, PERCENT)\n\n    elif(l < 0):\n        for motor in leftMotors:\n            motor.spin(REVERSE)\n            motor.set_velocity(l, PERCENT)\n    else:\n        for motor in leftMotors:\n            motor.stop()\n    \n    if(r > 0):\n        for motor in rightMotors:\n            motor.spin(FORWARD)\n            motor.set_velocity(r, PERCENT)\n    elif(r < 0):\n        for motor in rightMotors:\n            motor.spin(REVERSE)\n            motor.set_velocity(r, PERCENT)\n    else:\n        for motor in rightMotors:\n            motor.stop()\n    \n    if(a > 0):\n        armMotor.spin(FORWARD)\n        armMotor.set_velocity(100, PERCENT)\n    elif(a < 0):\n        armMotor.spin(REVERSE)\n        armMotor.set_velocity(-100, PERCENT)\n    else:\n        armMotor.stop()\n\n    if(a2 > 0):\n        armMotor2.spin(FORWARD)\n        armMotor2.set_velocity(100, PERCENT)\n    elif(a2 < 0):\n        armMotor2.spin(REVERSE)\n        armMotor2.set_velocity(-100, PERCENT)\n    else:\n        armMotor2.stop()\n    \n    \n    \ndef somethingChanged():\n\n    if(((leftMotor == tempL) and (rightMotor == tempR))):\n        if((prevArmMotorState != armMotorState) or ((prevArmMotorState2 != armMotorState2))):\n            return True\n        return False\n    \n    return True\n\ndef record(button):\n    print(str(leftMotor) + \"&\" + str(rightMotor) + \"@\" + str(brain.timer.time()) + button + \"|\", end=\"\")\n\n#######################################\ndef pre_autonomous():\n    # actions to do when the program starts\n    brain.screen.clear_screen()\n    brain.screen.print(\"pre auton code\")\n    wait(1, SECONDS)\n#########################################\ndef autonomous():\n    brain.screen.clear_screen()\n    brain.screen.print(\"autonomous code\")\n    # place automonous code here\n\n    startIndex = 0\n    startTime = brain.timer.time(MSEC)\n    buttonX = False\n   \n    \n    while(startIndex < len(RECORDED_INPUT)):\n        totalMove = RECORDED_INPUT[startIndex : RECORDED_INPUT.index(\"|\", startIndex)]\n        andIndex = totalMove.index(\"&\")\n        leftMove = int(totalMove[0 : andIndex])\n        atIndex = totalMove.index(\"@\")\n        rightMove = int(totalMove[(andIndex + 1) : atIndex])\n        milliseconds = int(totalMove[(atIndex + 1) : len(totalMove) - 1])\n        button = totalMove[len(totalMove) - 1]\n        startIndex +=  (len(totalMove) + 1)\n\n        \n        while(True):\n            if(milliseconds == (brain.timer.time(MSEC) - startTime)):\n                if(button == \"r\"):\n                    move(leftMove, rightMove, 1, 0)\n                elif(button == \"l\"):\n                    move(leftMove, rightMove, -1, 0)\n                else:\n                    move(leftMove, rightMove, 0, 0)\n                \n                if(button == \"X\"):\n                    buttonX = not buttonX\n                    sol_a.set(buttonX)\n                    \n                \n                #print(\"L: \" + str(leftMove) + \" R: \" + str(rightMove) + \" button: \" + button)\n                break\n            \n\n\n##########################################   \n\ndef user_control():\n    brain.screen.clear_screen()\n    # place driver control in this while loop\n    global buttonX\n    global recordInput\n\n    while(True):   \n        leftMotor = controller_1.axis3.position()\n        rightMotor = controller_1.axis2.position()\n        \n        if(controller_1.buttonUp.pressing()):\n                \n                recordInput = not recordInput\n                \n                if(recordInput):\n                    controller_1.screen.print(\"RECORDING\")\n                else:\n                    controller_1.screen.clear_screen()\n                wait(200, MSEC)\n                \n        if(controller_1.buttonX.pressing()):\n            \n            buttonX = not buttonX\n            sol_a.set(buttonX)\n\n            if(recordInput):\n                record(\"X\")\n            wait(200, MSEC)\n\n        if(controller_1.buttonL1.pressing()):\n            armMotorState = 1\n        elif(controller_1.buttonR1.pressing()):\n            armMotorState = -1\n        else:\n            armMotorState = 0\n\n        if(controller_1.buttonL2.pressing()):\n            armMotorState2 = 1\n        elif(controller_1.buttonR2.pressing()):\n            armMotorState2 = -1\n        else:\n            armMotorState2 = 0\n\n        if(somethingChanged()):\n            \n            move(leftMotor, rightMotor, armMotorState, armMotorState2)\n            tempL = leftMotor\n            tempR = rightMotor\n            \n            if(recordInput):\n                if(armMotorState == 1):\n                    record(\"r\")\n                elif(armMotorState == -1):\n                    record(\"l\")\n                else:\n                    record(\"-\")\n        \n        prevArmMotorState = armMotorState  \n        prevArmMotorState2 = armMotorState2\n        wait(20, MSEC)\n\n#########################################\n\n# create competition instance\ncomp = Competition(user_control, autonomous)\npre_autonomous()\n\n###DELETE THIS FOR COMPETITION###\nuser_control()\n#################################\n","textLanguage":"python","rconfig":[{"port":[1],"name":"motor1L","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"true","fwd":"forward","rev":"reverse","gear":"ratio6_1"},"triportSourcePort":22},{"port":[2],"name":"motor2L","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"true","fwd":"forward","rev":"reverse","gear":"ratio6_1"},"triportSourcePort":22},{"port":[3],"name":"motor1R","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio6_1"},"triportSourcePort":22},{"port":[4],"name":"motor2R","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio6_1"},"triportSourcePort":22},{"port":[1],"name":"sol_a","customName":true,"deviceType":"DigitalOut","deviceClass":"digital_out","setting":{},"triportSourcePort":22},{"port":[5,6],"name":"armMotor","customName":true,"deviceType":"MotorGroup","deviceClass":"motor_group","setting":{"fwd":"forward","rev":"reverse","gear":"ratio6_1","motor_a_reversed":"false","motor_b_reversed":"true"},"triportSourcePort":22},{"port":[],"name":"controller_1","customName":false,"deviceType":"Controller","deviceClass":"controller","setting":{"left":"","leftDir":"false","right":"","rightDir":"false","upDown":"","upDownDir":"false","xB":"","xBDir":"false","drive":"none","id":"primary"},"triportSourcePort":22},{"port":[7,8],"name":"armMotor2","customName":true,"deviceType":"MotorGroup","deviceClass":"motor_group","setting":{"fwd":"forward","rev":"reverse","gear":"ratio18_1","motor_a_reversed":"false","motor_b_reversed":"true"}}],"slot":0,"platform":"V5","sdkVersion":"20211210.18.00.00","appVersion":"2.3.0","fileFormat":"1.0.1","icon":"","targetBrainGen":"First","target":"Physical"}