{"mode":"Text","textContent":"#region VEXcode Generated Robot Configuration\nfrom vex import *\nimport urandom\n\n# Brain should be defined by default\nbrain=Brain()\n\n# Robot configuration code\nmotor1L = Motor(Ports.PORT1, GearSetting.RATIO_6_1, True)\nmotor2L = Motor(Ports.PORT2, GearSetting.RATIO_6_1, True)\nmotor1R = Motor(Ports.PORT3, GearSetting.RATIO_6_1, False)\nmotor2R = Motor(Ports.PORT4, GearSetting.RATIO_6_1, False)\nsol_a = DigitalOut(brain.three_wire_port.a)\narmMotor_motor_a = Motor(Ports.PORT5, GearSetting.RATIO_6_1, False)\narmMotor_motor_b = Motor(Ports.PORT6, GearSetting.RATIO_6_1, True)\narmMotor = MotorGroup(armMotor_motor_a, armMotor_motor_b)\ncontroller_1 = Controller(PRIMARY)\narmMotor2 = Motor(Ports.PORT7, GearSetting.RATIO_6_1, False)\n\n\n# wait for rotation sensor to fully initialize\nwait(30, MSEC)\n\n\n\n\n\n\n#endregion VEXcode Generated Robot Configuration\n\n# ------------------------------------------\n# \n# \tProject:      VEXcode Project\n#\tAuthor:       VEX\n#\tCreated:\n#\tDescription:  VEXcode V5 Python Project\n# \n# ------------------------------------------\n\n# Library imports\nfrom vex import *\n\n# Begin project code\n\n#region VEXcode Generated Robot Configuration\nfrom vex import *\nimport urandom\n\n# Brain should be defined by default\nbrain=Brain()\n\n# Robot configuration code\n\n\n# wait for rotation sensor to fully initialize\nwait(30, MSEC)\n#endregion VEXcode Generated Robot Configuration\n\n# ------------------------------------------\n# \n# \tProject:\n#\tAuthor:\n#\tCreated:\n#\tConfiguration:\n# \n# ------------------------------------------\n\n# Library imports\nfrom vex import *\n\n# Begin project code\n\nleftMotors = (motor1L, motor2L)\nrightMotors = (motor1R, motor2R)\n\nleftMotor = 1\nrightMotor = 1\n\ntempL = None\ntempR = None\n\nbuttonX = False\n\nrecordInput = False\n\narmMotorState = 0\nprevArmMotorState = 1\n\narmMotorState2 = 0\nprevArmMotorState2 = 1\n\n#Paste recorded input here:\nRECORDED_INPUT = \"0&0@968l|0&0@1389-|31&0@1560-|49&0@1581-|70&24@1623-|80&41@1645-|82&58@1666-|82&70@1687-|84&79@1709-|92&88@1730-|100&97@1773-|100&100@1794-|96&100@2283-|88&100@2326-|81&100@2347-|73&100@2368-|71&100@2390-|62&100@2453-|44&100@2496-|4&71@2517-|0&40@2539-|0&29@2560-|0&26@2581-|0&25@2624-|0&21@2645-|0&7@2667-|0&1@2688-|0&0@2709-|-25&0@2794-|-53&0@2816-|-66&0@2837-|-69&0@2858-|-70&0@2880-|-73&9@2922-|-74&21@2944-|-74&39@2965-|-71&42@2986-|-44&45@3029-|-44&54@3050-|-43&59@3093-|-37&60@3114-|-24&53@3136-|0&32@3157-|0&14@3178-|0&0@3221-|14&0@3264-|29&0@3285-|37&0@3327-|52&1@3349-|65&15@3391-|86&45@3413-|99&59@3434-|100&71@3455-|100&74@3498-|100&73@3519-|100&70@3541-|100&35@3562-|100&15@3583-|100&0@3626-|96&0@3647-|42&0@3669-|0&0@3690-|0&0@3966r|0&-9@4221r|0&-16@4243r|0&-35@4264r|-6&-51@4285r|-56&-81@4328-|-79&-85@4349-|-89&-85@4392-|-98&-89@4413-|-100&-93@4435-|-100&-100@4456-|-93&-100@4732-|-42&-100@4754-|0&-100@4796-|1&-100@4860-|2&-100@4882-|1&-100@4924-|2&-100@4988-|3&-100@5009-|0&-100@5052-|-14&-100@5095-|-59&-100@5116-|-90&-100@5137-|-100&-100@5159-|-100&-81@5669-|-100&-34@5690-|-100&0@5711-|-100&-7@5860-|-100&-29@5882-|-100&-67@5903-|-100&-100@5945-|-70&-100@6009-|-30&-100@6031-|0&-100@6052-|0&-74@6137-|0&0@6158-|\"\n##############\n\narmMotor.set_stopping(HOLD)\narmMotor2.set_stopping(HOLD)\n\ndef move(l, r, a, a2):\n    \n    if(l > 0):\n        for motor in leftMotors:\n            motor.spin(FORWARD)\n            motor.set_velocity(l, PERCENT)\n\n    elif(l < 0):\n        for motor in leftMotors:\n            motor.spin(REVERSE)\n            motor.set_velocity(l, PERCENT)\n    else:\n        for motor in leftMotors:\n            motor.stop()\n    \n    if(r > 0):\n        for motor in rightMotors:\n            motor.spin(FORWARD)\n            motor.set_velocity(r, PERCENT)\n    elif(r < 0):\n        for motor in rightMotors:\n            motor.spin(REVERSE)\n            motor.set_velocity(r, PERCENT)\n    else:\n        for motor in rightMotors:\n            motor.stop()\n    \n    if(a > 0):\n        armMotor.spin(FORWARD)\n        armMotor.set_velocity(50, PERCENT)\n    elif(a < 0):\n        armMotor.spin(REVERSE)\n        armMotor.set_velocity(-50, PERCENT)\n    else:\n        armMotor.stop()\n\n    if(a2 > 0):\n        armMotor2.spin(FORWARD)\n        armMotor2.set_velocity(20, PERCENT)\n    elif(a2 < 0):\n        armMotor2.spin(REVERSE)\n        armMotor2.set_velocity(-20, PERCENT)\n    else:\n        armMotor2.stop()\n    \n    \n    \ndef somethingChanged():\n\n    global prevArmMotorState\n    global armMotorState\n    global prevArmMotorState2\n    global armMotorState2\n\n\n    if((prevArmMotorState != armMotorState) or (prevArmMotorState2 != armMotorState2)):\n        return True\n        \n\n    if((leftMotor != tempL) or (rightMotor != tempR)):\n        return True\n\n    return False\n\ndef record(button):\n    print(str(leftMotor) + \"&\" + str(rightMotor) + \"@\" + str(brain.timer.time()) + button + \"|\", end=\"\")\n\n#######################################\ndef pre_autonomous():\n    # actions to do when the program starts\n    brain.screen.clear_screen()\n    brain.screen.print(\"pre auton code\")\n    wait(1, SECONDS)\n#########################################\ndef autonomous():\n    brain.screen.clear_screen()\n    brain.screen.print(\"autonomous code\")\n    # place automonous code here\n\n    startIndex = 0\n    startTime = brain.timer.time(MSEC)\n    buttonX = False\n   \n    \n    while(startIndex < len(RECORDED_INPUT)):\n        totalMove = RECORDED_INPUT[startIndex : RECORDED_INPUT.index(\"|\", startIndex)]\n        andIndex = totalMove.index(\"&\")\n        leftMove = int(totalMove[0 : andIndex])\n        atIndex = totalMove.index(\"@\")\n        rightMove = int(totalMove[(andIndex + 1) : atIndex])\n        milliseconds = int(totalMove[(atIndex + 1) : len(totalMove) - 1])\n        button = totalMove[len(totalMove) - 1]\n        startIndex +=  (len(totalMove) + 1)\n\n        \n        while(True):\n            if(milliseconds == (brain.timer.time(MSEC) - startTime)):\n                if(button == \"r\"):\n                    move(leftMove, rightMove, 1, 0)\n                elif(button == \"l\"):\n                    move(leftMove, rightMove, -1, 0)\n                else:\n                    move(leftMove, rightMove, 0, 0)\n                \n                if(button == \"X\"):\n                    buttonX = not buttonX\n                    sol_a.set(buttonX)\n                    \n                \n                #print(\"L: \" + str(leftMove) + \" R: \" + str(rightMove) + \" button: \" + button)\n                break\n            \n\n\n##########################################   \n\ndef user_control():\n    brain.screen.clear_screen()\n    # place driver control in this while loop\n    global buttonX\n    global recordInput\n    global tempL\n    global tempR\n    global leftMotor\n    global rightMotor\n    global armMotorState\n    global prevArmMotorState\n    global armMotorState2\n    global prevArmMotorState2\n\n    while(True):   \n        leftMotor = controller_1.axis3.position()\n        rightMotor = controller_1.axis2.position()\n        \n        if(controller_1.buttonUp.pressing()):\n                \n                recordInput = not recordInput\n                \n                if(recordInput):\n                    controller_1.screen.print(\"RECORDING\")\n                else:\n                    controller_1.screen.clear_screen()\n                wait(200, MSEC)\n                \n        if(controller_1.buttonX.pressing()):\n            \n            buttonX = not buttonX\n            sol_a.set(buttonX)\n\n            if(recordInput):\n                record(\"X\")\n            wait(200, MSEC)\n\n        if(controller_1.buttonL1.pressing()):\n            armMotorState = 1\n        elif(controller_1.buttonL2.pressing()):\n            armMotorState = -1\n        else:\n            armMotorState = 0\n\n        if(controller_1.buttonR2.pressing()):\n            armMotorState2 = 1\n        elif(controller_1.buttonR1.pressing()):\n            armMotorState2 = -1\n        else:\n            armMotorState2 = 0\n\n        if(somethingChanged()):\n            move(leftMotor, rightMotor, armMotorState, armMotorState2)\n            tempL = leftMotor\n            tempR = rightMotor\n            prevArmMotorState = armMotorState  \n            prevArmMotorState2 = armMotorState2\n    \n            \n            if(recordInput):\n                if(armMotorState == 1):\n                    record(\"r\")\n                elif(armMotorState == -1):\n                    record(\"l\")\n                else:\n                    record(\"-\")\n        \n        \n\n        wait(20, MSEC)\n\n#########################################\n\n# create competition instance\ncomp = Competition(user_control, autonomous)\npre_autonomous()\n\n###DELETE THIS FOR COMPETITION###\n#autonomous()\n#################################\n","textLanguage":"python","rconfig":[{"port":[1],"name":"motor1L","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"true","fwd":"forward","rev":"reverse","gear":"ratio6_1"},"triportSourcePort":22},{"port":[2],"name":"motor2L","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"true","fwd":"forward","rev":"reverse","gear":"ratio6_1"},"triportSourcePort":22},{"port":[3],"name":"motor1R","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio6_1"},"triportSourcePort":22},{"port":[4],"name":"motor2R","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio6_1"},"triportSourcePort":22},{"port":[1],"name":"sol_a","customName":true,"deviceType":"DigitalOut","deviceClass":"digital_out","setting":{},"triportSourcePort":22},{"port":[5,6],"name":"armMotor","customName":true,"deviceType":"MotorGroup","deviceClass":"motor_group","setting":{"fwd":"forward","rev":"reverse","gear":"ratio6_1","motor_a_reversed":"false","motor_b_reversed":"true"},"triportSourcePort":22},{"port":[],"name":"controller_1","customName":false,"deviceType":"Controller","deviceClass":"controller","setting":{"left":"","leftDir":"false","right":"","rightDir":"false","upDown":"","upDownDir":"false","xB":"","xBDir":"false","drive":"none","id":"primary"},"triportSourcePort":22},{"port":[7],"name":"armMotor2","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio6_1"},"triportSourcePort":22}],"slot":0,"platform":"V5","sdkVersion":"20211210.18.00.00","appVersion":"2.3.0","fileFormat":"1.0.1","icon":"","targetBrainGen":"First","target":"Physical"}