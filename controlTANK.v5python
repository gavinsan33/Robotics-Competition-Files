{"mode":"Text","textContent":"#region VEXcode Generated Robot Configuration\nfrom vex import *\nimport urandom\n\n# Brain should be defined by default\nbrain=Brain()\n\n# Robot configuration code\nmotor1L = Motor(Ports.PORT1, GearSetting.RATIO_6_1, True)\nmotor2L = Motor(Ports.PORT2, GearSetting.RATIO_6_1, True)\nmotor1R = Motor(Ports.PORT3, GearSetting.RATIO_6_1, False)\nmotor2R = Motor(Ports.PORT4, GearSetting.RATIO_6_1, False)\nsol_a = DigitalOut(brain.three_wire_port.a)\narmMotor_motor_a = Motor(Ports.PORT5, GearSetting.RATIO_6_1, False)\narmMotor_motor_b = Motor(Ports.PORT6, GearSetting.RATIO_6_1, True)\narmMotor = MotorGroup(armMotor_motor_a, armMotor_motor_b)\ncontroller_1 = Controller(PRIMARY)\narmMotor2 = Motor(Ports.PORT7, GearSetting.RATIO_6_1, False)\n\n\n# wait for rotation sensor to fully initialize\nwait(30, MSEC)\n\n\n\n\n\n\n#endregion VEXcode Generated Robot Configuration\n\n# ------------------------------------------\n# \n# \tProject:      VEXcode Project\n#\tAuthor:       VEX\n#\tCreated:\n#\tDescription:  VEXcode V5 Python Project\n# \n# ------------------------------------------\n\n# Library imports\nfrom vex import *\n\n# Begin project code\n\n#region VEXcode Generated Robot Configuration\nfrom vex import *\nimport urandom\n\n# Brain should be defined by default\nbrain=Brain()\n\n# Robot configuration code\n\n\n# wait for rotation sensor to fully initialize\nwait(30, MSEC)\n#endregion VEXcode Generated Robot Configuration\n\n# ------------------------------------------\n# \n# \tProject:\n#\tAuthor:\n#\tCreated:\n#\tConfiguration:\n# \n# ------------------------------------------\n\n# Library imports\nfrom vex import *\n\n# Begin project code\n\nleftMotors = (motor1L, motor2L)\nrightMotors = (motor1R, motor2R)\n\nleftMotor = 1\nrightMotor = 1\n\ntempL = None\ntempR = None\n\nbuttonX = False\n\nrecordInput = False\n\narmMotorState = 0\nprevArmMotorState = 1\n\narmMotorState2 = 0\nprevArmMotorState2 = 1\n\n#Paste recorded input here:\nRECORDED_INPUT = \"0&0@1479l|0&0@1820-|0&0@1926l|0&0@2075-|4&0@2266-|34&13@2309-|41&21@2352-|48&28@2373-|51&29@2394-|55&36@2416-|55&42@2458-|55&53@2479-|57&56@2501-|66&59@2522-|73&59@2544-|74&59@2565-|73&59@2607-|74&58@2650-|73&58@2671-|73&59@2714-|73&60@2757-|73&64@2778-|73&63@2799-|73&62@2821-|73&63@2842-|75&36@2863-|76&20@2906-|79&9@2927-|80&6@2949-|80&4@2970-|79&2@2991-|79&0@3013-|79&1@3055-|79&0@3119-|79&1@3162-|75&22@3225-|71&41@3247-|64&57@3268-|59&64@3290-|56&74@3311-|51&79@3353-|38&79@3375-|33&79@3396-|19&81@3417-|14&80@3503-|0&79@3524-|0&74@3545-|0&65@3567-|0&51@3609-|0&52@3779-|0&51@3801-|-1&49@3822-|-7&47@3843-|-14&30@3865-|-20&12@3907-|-51&2@3929-|-60&1@3950-|-77&1@3971-|-71&1@4014-|-58&1@4056-|-43&2@4078-|-14&1@4099-|0&1@4121-|0&2@4248-|0&1@4269-|0&2@4291-|0&0@4312-|0&1@4355-|0&2@4419-|2&2@4440-|29&1@4461-|35&1@4504-|51&2@4525-|59&1@4547-|74&2@4568-|79&3@4589-|79&13@4611-|79&20@4653-|73&32@4675-|62&40@4696-|48&46@4717-|2&48@4760-|0&47@4802-|0&48@4824-|0&4@4845-|0&2@4866-|0&0@4909-|-4&0@5015-|-8&0@5058-|-12&8@5079-|-12&14@5101-|-3&17@5122-|0&15@5143-|0&17@5165-|0&9@5207-|0&1@5229-|0&2@5399-|0&0@5441-|0&2@5463-|0&1@5526-|0&0@5569-|0&1@5590-|0&2@5612-|0&0@5654-|0&1@5676-|0&2@5697-|0&1@5718-|0&1@5825r|0&2@5846r|0&1@5867r|0&2@5910r|0&0@5953r|0&2@5974r|0&0@5995r|0&2@6017r|0&1@6059r|0&1@6102-|0&0@6123-|0&1@6145-|0&0@6166-|0&1@6208-|0&0@6272-|-3&-11@6379-|-19&-31@6400-|-32&-47@6421-|-37&-51@6443-|-40&-51@6464-|-39&-49@6528-|-39&-48@6549-|-40&-49@6571-|-40&-48@6592-|-37&-48@6613-|-39&-48@6656-|-40&-48@6762-|-39&-46@6826-|-40&-45@6847-|-40&-41@6869-|-39&-38@6890-|-39&-37@6911-|-39&-36@6954-|-39&-35@6975-|-39&-34@6997-|-39&-33@7018-|-40&-31@7039-|-39&-31@7741-|-40&-31@7762-|-40&-32@7868-|-40&-33@7890-|-40&-34@7975-|-40&-33@7996-|-40&-34@8018-|-40&-33@8124-|-40&-34@8166-|-39&-33@8188-|-40&-34@8209-|-40&-33@8252-|-39&-33@8273-|-40&-33@8294-|-39&-33@8316-|-40&-34@8380-|-40&-33@8443-|-40&-34@8486-|-40&-33@8529-|-39&-33@8550-|-40&-33@8593-|-40&-27@8614-|-40&-18@8657-|-40&-7@8678-|-40&0@8699-|-39&0@8763-|-40&0@8784-|-36&0@8827-|-33&0@8848-|-32&0@8870-|-29&0@8891-|0&0@8912-|\"\n##############\n\narmMotor.set_stopping(HOLD)\narmMotor2.set_stopping(HOLD)\n\ndef move(l, r, a, a2):\n    \n    if(l > 0):\n        for motor in leftMotors:\n            motor.spin(FORWARD)\n            motor.set_velocity(l, PERCENT)\n\n    elif(l < 0):\n        for motor in leftMotors:\n            motor.spin(REVERSE)\n            motor.set_velocity(l, PERCENT)\n    else:\n        for motor in leftMotors:\n            motor.stop()\n    \n    if(r > 0):\n        for motor in rightMotors:\n            motor.spin(FORWARD)\n            motor.set_velocity(r, PERCENT)\n    elif(r < 0):\n        for motor in rightMotors:\n            motor.spin(REVERSE)\n            motor.set_velocity(r, PERCENT)\n    else:\n        for motor in rightMotors:\n            motor.stop()\n    \n    if(a > 0):\n        armMotor.spin(FORWARD)\n        armMotor.set_velocity(50, PERCENT)\n    elif(a < 0):\n        armMotor.spin(REVERSE)\n        armMotor.set_velocity(-50, PERCENT)\n    else:\n        armMotor.stop()\n\n    if(a2 > 0):\n        armMotor2.spin(FORWARD)\n        armMotor2.set_velocity(20, PERCENT)\n    elif(a2 < 0):\n        armMotor2.spin(REVERSE)\n        armMotor2.set_velocity(-20, PERCENT)\n    else:\n        armMotor2.stop()\n    \n    \n    \ndef somethingChanged():\n\n    global prevArmMotorState\n    global armMotorState\n    global prevArmMotorState2\n    global armMotorState2\n\n\n    if((prevArmMotorState != armMotorState) or (prevArmMotorState2 != armMotorState2)):\n        return True\n        \n\n    if((leftMotor != tempL) or (rightMotor != tempR)):\n        return True\n\n    return False\n\ndef record(button):\n    print(str(leftMotor) + \"&\" + str(rightMotor) + \"@\" + str(brain.timer.time()) + button + \"|\", end=\"\")\n\n#######################################\ndef pre_autonomous():\n    # actions to do when the program starts\n    brain.screen.clear_screen()\n    brain.screen.print(\"pre auton code\")\n    wait(1, SECONDS)\n#########################################\ndef autonomous():\n    brain.screen.clear_screen()\n    brain.screen.print(\"autonomous code\")\n    # place automonous code here\n\n    startIndex = 0\n    startTime = brain.timer.time(MSEC)\n    buttonX = False\n   \n    \n    while(startIndex < len(RECORDED_INPUT)):\n        totalMove = RECORDED_INPUT[startIndex : RECORDED_INPUT.index(\"|\", startIndex)]\n        andIndex = totalMove.index(\"&\")\n        leftMove = int(totalMove[0 : andIndex])\n        atIndex = totalMove.index(\"@\")\n        rightMove = int(totalMove[(andIndex + 1) : atIndex])\n        milliseconds = int(totalMove[(atIndex + 1) : len(totalMove) - 1])\n        button = totalMove[len(totalMove) - 1]\n        startIndex +=  (len(totalMove) + 1)\n\n        \n        while(True):\n            if(milliseconds == (brain.timer.time(MSEC) - startTime)):\n                if(button == \"r\"):\n                    move(leftMove, rightMove, 1, 0)\n                elif(button == \"l\"):\n                    move(leftMove, rightMove, -1, 0)\n                else:\n                    move(leftMove, rightMove, 0, 0)\n                \n                if(button == \"X\"):\n                    buttonX = not buttonX\n                    sol_a.set(buttonX)\n                    \n                \n                #print(\"L: \" + str(leftMove) + \" R: \" + str(rightMove) + \" button: \" + button)\n                break\n            \n\n\n##########################################   \n\ndef user_control():\n    brain.screen.clear_screen()\n    # place driver control in this while loop\n    global buttonX\n    global recordInput\n    global tempL\n    global tempR\n    global leftMotor\n    global rightMotor\n    global armMotorState\n    global prevArmMotorState\n    global armMotorState2\n    global prevArmMotorState2\n\n    while(True):   \n        leftMotor = controller_1.axis3.position()\n        rightMotor = controller_1.axis2.position()\n        \n        if(controller_1.buttonUp.pressing()):\n                \n                recordInput = not recordInput\n                \n                if(recordInput):\n                    controller_1.screen.print(\"RECORDING\")\n                else:\n                    controller_1.screen.clear_screen()\n                wait(200, MSEC)\n                \n        if(controller_1.buttonX.pressing()):\n            \n            buttonX = not buttonX\n            sol_a.set(buttonX)\n\n            if(recordInput):\n                record(\"X\")\n            wait(200, MSEC)\n\n        if(controller_1.buttonL1.pressing()):\n            armMotorState = 1\n        elif(controller_1.buttonL2.pressing()):\n            armMotorState = -1\n        else:\n            armMotorState = 0\n\n        if(controller_1.buttonR2.pressing()):\n            armMotorState2 = 1\n        elif(controller_1.buttonR1.pressing()):\n            armMotorState2 = -1\n        else:\n            armMotorState2 = 0\n\n        if(somethingChanged()):\n            move(leftMotor, rightMotor, armMotorState, armMotorState2)\n            tempL = leftMotor\n            tempR = rightMotor\n            prevArmMotorState = armMotorState  \n            prevArmMotorState2 = armMotorState2\n    \n            \n            if(recordInput):\n                if(armMotorState == 1):\n                    record(\"r\")\n                elif(armMotorState == -1):\n                    record(\"l\")\n                else:\n                    record(\"-\")\n        \n        \n\n        wait(20, MSEC)\n\n#########################################\n\n# create competition instance\ncomp = Competition(user_control, autonomous)\npre_autonomous()\n\n###DELETE THIS FOR COMPETITION###\n#autonomous()\n#################################\n","textLanguage":"python","rconfig":[{"port":[1],"name":"motor1L","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"true","fwd":"forward","rev":"reverse","gear":"ratio6_1"},"triportSourcePort":22},{"port":[2],"name":"motor2L","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"true","fwd":"forward","rev":"reverse","gear":"ratio6_1"},"triportSourcePort":22},{"port":[3],"name":"motor1R","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio6_1"},"triportSourcePort":22},{"port":[4],"name":"motor2R","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio6_1"},"triportSourcePort":22},{"port":[1],"name":"sol_a","customName":true,"deviceType":"DigitalOut","deviceClass":"digital_out","setting":{},"triportSourcePort":22},{"port":[5,6],"name":"armMotor","customName":true,"deviceType":"MotorGroup","deviceClass":"motor_group","setting":{"fwd":"forward","rev":"reverse","gear":"ratio6_1","motor_a_reversed":"false","motor_b_reversed":"true"},"triportSourcePort":22},{"port":[],"name":"controller_1","customName":false,"deviceType":"Controller","deviceClass":"controller","setting":{"left":"","leftDir":"false","right":"","rightDir":"false","upDown":"","upDownDir":"false","xB":"","xBDir":"false","drive":"none","id":"primary"},"triportSourcePort":22},{"port":[7],"name":"armMotor2","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio6_1"},"triportSourcePort":22}],"slot":0,"platform":"V5","sdkVersion":"20211210.18.00.00","appVersion":"2.3.0","fileFormat":"1.0.1","icon":"","targetBrainGen":"First","target":"Physical"}